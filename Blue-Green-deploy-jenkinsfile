pipeline {
    agent any
    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['blue', 'green'], description: 'Choose which environment to deploy: Blue or Green')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Specify the Docker image tag for the deployment')
        booleanParam(name: 'SWITCH_TRAFFIC', defaultValue: false, description: 'Switch traffic between Blue and Green')
    }
    environment {
        CHARTS_DIR = 'helm-charts'
        FLASK_HELM_CHART = 'flask-app'
        MYSQL_HELM_CHART = 'mysql'
        RELEASE_NAME_MYSQL = 'database'
        RELEASE_NAME_FLASK = 'portfolio'
        REGISTRY_CREDENTIAL = 'dockerhub'
        DOCKER_IMAGE_NAME = 'preranamauryaa/portfolioflaskapp'
        DOCKER_IMAGE_TAG = {params.DOCKER_TAG}
    }



    stages {
        stage('CleanWorkspace') {
            steps {
                cleanWs()
            }
        }

        stage('Clone Repo') {
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],  // Branch to checkout
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CloneOption', honorRefspec: true, noTags: true, reference: '', shallow: true]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: [
                        [credentialsId: '883b0edd-cee6-41cb-bcf6-aac6b3142818', url: 'git@github.com:Prerana-Mauryaa/Deployment-of-Two-Tier-App.git']
                    ]
                ]
            }
}

        stage('Build and Deploy Docker image') {
            steps {
                script {
                    echo 'Building and pushing the Docker image to Docker Hub'
                    // Build the Docker image with the tag 'latest'
                    dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}")
                    
                    // Push the Docker image to Docker Hub
                    docker.withRegistry('', REGISTRY_CREDENTIAL) {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Install MySQL') {
            steps {
                script {
                    echo 'Installing or upgrading MySQL using Helm'
                    sh """
                    helm upgrade --install ${RELEASE_NAME_MYSQL} ${CHARTS_DIR}/${MYSQL_HELM_CHART} --wait
                    """
                }
            }
        }

        stage('Deploy on EKS') {
            steps {
                script {
                    echo "Deploying Flask app to ${params.DEPLOY_ENV} environment"
                    sh """
                    helm upgrade --install ${RELEASE_NAME_FLASK}-${params.DEPLOY_ENV} \
                        ${CHARTS_DIR}/${FLASK_HELM_CHART} \
                        --values ${CHARTS_DIR}/${FLASK_HELM_CHART}/${params.DEPLOY_ENV}-values.yaml \
                        --set image.tag=${params.DOCKER_TAG} \
                        --wait
                    """
                }
            }
        }

        stage('Switch Traffic') {
            when {
                expression { params.SWITCH_TRAFFIC }
            }
            steps {
                script {
                    echo "Switching traffic to ${params.DEPLOY_ENV} environment"
                    sh """
                    kubectl patch service flask-service \
                        -p '{"spec": {"selector": {"app": "portfolio-${params.DEPLOY_ENV}"}}}'
                    """
                }
            }
        }

    }
}
